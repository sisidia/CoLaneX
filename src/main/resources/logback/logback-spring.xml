<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true" scan="true">
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder>
      <pattern>%d{yyyyMMdd HH:mm:ss.SSS} %-5level - &lt;%t&gt; [%C - %M:%L] %msg %n</pattern>
    </encoder>
  </appender>
  
  <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
     <encoder>
         <pattern> %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %magenta(%-4relative) --- [ %thread{10} ] %cyan(%logger{20}) : %msg%n </pattern>
     </encoder>
  </appender>
         
  <logger name="jdbc" level="OFF"/>
  <logger name="jdbc.sqlonly" level="OFF"/>
  <logger name="jdbc.sqltiming" level="debug"/>
  <logger name="jdbc.audit" level="OFF"/>
  <logger name="jdbc.resultset" level="debug"/>
  <logger name="jdbc.resultsettable" level="debug"/>
  <logger name="jdbc.connection" level="OFF"/>
  
  <!--
	 - jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. 
	 - jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. 
	 - jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 
	 - jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남긴다.
	 - jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
   -->
  <!-- trace > debug > info > warn > error -->
  <logger name="com.obigo" level="debug" additivity="false"> <!-- 로그 중복 출력 막기 : additivity="false" -->
     <appender-ref ref="STDOUT" />
  </logger>
  
  <root level="info">
    <appender-ref ref="STDOUT" />
  </root>
  
</configuration>